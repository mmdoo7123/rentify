// Generated by view binder compiler. Do not edit!
package com.example.renters.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.renters.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemManagementBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button buttonAddItem;

  @NonNull
  public final Button buttonDeleteItem;

  @NonNull
  public final Button buttonEditItem;

  @NonNull
  public final EditText editTextItemDescription;

  @NonNull
  public final EditText editTextItemFee;

  @NonNull
  public final EditText editTextItemName;

  @NonNull
  public final EditText editTextRentalPeriod;

  @NonNull
  public final ConstraintLayout itemManagementLayout;

  @NonNull
  public final LinearLayout linearLayoutActions;

  @NonNull
  public final RecyclerView recyclerViewItems;

  @NonNull
  public final Spinner spinnerCategories;

  private ItemManagementBinding(@NonNull ConstraintLayout rootView, @NonNull Button buttonAddItem,
      @NonNull Button buttonDeleteItem, @NonNull Button buttonEditItem,
      @NonNull EditText editTextItemDescription, @NonNull EditText editTextItemFee,
      @NonNull EditText editTextItemName, @NonNull EditText editTextRentalPeriod,
      @NonNull ConstraintLayout itemManagementLayout, @NonNull LinearLayout linearLayoutActions,
      @NonNull RecyclerView recyclerViewItems, @NonNull Spinner spinnerCategories) {
    this.rootView = rootView;
    this.buttonAddItem = buttonAddItem;
    this.buttonDeleteItem = buttonDeleteItem;
    this.buttonEditItem = buttonEditItem;
    this.editTextItemDescription = editTextItemDescription;
    this.editTextItemFee = editTextItemFee;
    this.editTextItemName = editTextItemName;
    this.editTextRentalPeriod = editTextRentalPeriod;
    this.itemManagementLayout = itemManagementLayout;
    this.linearLayoutActions = linearLayoutActions;
    this.recyclerViewItems = recyclerViewItems;
    this.spinnerCategories = spinnerCategories;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemManagementBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemManagementBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_management, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemManagementBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonAddItem;
      Button buttonAddItem = ViewBindings.findChildViewById(rootView, id);
      if (buttonAddItem == null) {
        break missingId;
      }

      id = R.id.buttonDeleteItem;
      Button buttonDeleteItem = ViewBindings.findChildViewById(rootView, id);
      if (buttonDeleteItem == null) {
        break missingId;
      }

      id = R.id.buttonEditItem;
      Button buttonEditItem = ViewBindings.findChildViewById(rootView, id);
      if (buttonEditItem == null) {
        break missingId;
      }

      id = R.id.editTextItemDescription;
      EditText editTextItemDescription = ViewBindings.findChildViewById(rootView, id);
      if (editTextItemDescription == null) {
        break missingId;
      }

      id = R.id.editTextItemFee;
      EditText editTextItemFee = ViewBindings.findChildViewById(rootView, id);
      if (editTextItemFee == null) {
        break missingId;
      }

      id = R.id.editTextItemName;
      EditText editTextItemName = ViewBindings.findChildViewById(rootView, id);
      if (editTextItemName == null) {
        break missingId;
      }

      id = R.id.editTextRentalPeriod;
      EditText editTextRentalPeriod = ViewBindings.findChildViewById(rootView, id);
      if (editTextRentalPeriod == null) {
        break missingId;
      }

      ConstraintLayout itemManagementLayout = (ConstraintLayout) rootView;

      id = R.id.linearLayoutActions;
      LinearLayout linearLayoutActions = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutActions == null) {
        break missingId;
      }

      id = R.id.recyclerViewItems;
      RecyclerView recyclerViewItems = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewItems == null) {
        break missingId;
      }

      id = R.id.spinnerCategories;
      Spinner spinnerCategories = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCategories == null) {
        break missingId;
      }

      return new ItemManagementBinding((ConstraintLayout) rootView, buttonAddItem, buttonDeleteItem,
          buttonEditItem, editTextItemDescription, editTextItemFee, editTextItemName,
          editTextRentalPeriod, itemManagementLayout, linearLayoutActions, recyclerViewItems,
          spinnerCategories);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
